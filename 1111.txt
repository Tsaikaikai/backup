    def check_rainbow(self, img_hsv, existing_panels):

        R1_hsv_lower = np.array([0,250,190])
        R1_hsv_upper = np.array([8,255,255])
        R2_hsv_lower = np.array([148,250,190])
        R2_hsv_upper = np.array([179,255,255])

        G_hsv_lower = np.array([53,250,190])
        G_hsv_upper = np.array([93,255,255])

        B_hsv_lower = np.array([99,250,190])
        B_hsv_upper = np.array([139,255,255])

        mask_red1 = cv2.inRange(img_hsv, R1_hsv_lower, R1_hsv_upper)
        mask_red2 = cv2.inRange(img_hsv, R2_hsv_lower, R2_hsv_upper)
        mask_red = cv2.bitwise_or(mask_red1, mask_red2)
        mask_green = cv2.inRange(img_hsv, G_hsv_lower, G_hsv_upper)
        mask_blue = cv2.inRange(img_hsv, B_hsv_lower, B_hsv_upper)

        # 計算紅色區域的平均x座標
        red_contours, _ = cv2.findContours(mask_red, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        red_x_coordinates = []
        for contour in red_contours:
            area = cv2.contourArea(contour)
            x, y, w, h = cv2.boundingRect(contour)
            if w > 80 or h > 80 :
                red_x_coordinates.append(x)
        if len(red_x_coordinates) > existing_panels/2:
            #red_x_avg = sum(red_x_coordinates) / len(red_x_coordinates)
            red_x_avg = np.mean(red_x_coordinates)
        else:
            return False

        # 計算綠色區域的平均x座標
        green_contours, _ = cv2.findContours(mask_green, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        green_x_coordinates = []
        for contour in green_contours:
            x, y, w, h = cv2.boundingRect(contour)
            if w > 80 or h > 80 :
                green_x_coordinates.append(x)
        if len(green_x_coordinates) > existing_panels/2:
            #green_x_avg = sum(green_x_coordinates) / len(green_x_coordinates)
            green_x_avg = np.mean(green_x_coordinates)
        else:
            return False

        # 計算藍色區域的平均x座標
        blue_contours, _ = cv2.findContours(mask_blue, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        blue_x_coordinates = []
        for contour in blue_contours:
            x, y, w, h = cv2.boundingRect(contour)
            if w > 80 or h > 80 :
                blue_x_coordinates.append(x)
        if len(blue_x_coordinates) > existing_panels/2:
            #blue_x_avg = sum(blue_x_coordinates) / len(blue_x_coordinates)
            blue_x_avg = np.mean(blue_x_coordinates)
        else:
            return False

        if (green_x_avg < red_x_avg) and (red_x_avg < blue_x_avg) and (blue_x_avg-green_x_avg) > 100:
            is_rainbow = True
        else:
            is_rainbow = False

        return is_rainbow

    def analysis_rainbow_pattern(self, image):

        height, width = image.shape[:2]

        # 迭代處理每個 roi_pox
        results = []
        for obj in self.data["obj_list"]:

            # 建立全黑的遮罩
            mask = np.zeros((height, width), dtype=np.uint8)
            roi_pox = obj["roi_pox"]
            roi_points = np.array(roi_pox, dtype=np.int32)

            # 創建掩碼區域
            cv2.fillPoly(mask, [roi_points], 255)

            # 保留 roi_pox 區域的影像，其餘填為黑色
            masked_img = cv2.bitwise_and(image, image, mask=mask)

            # 判斷是否有彩虹
            if(self.check_rainbow(masked_img,0)):
                results.append("Rainbow")
            else:
                results.append("Null")
        
        return results

資料量龐大有什麼方式可以加速以上運算嗎